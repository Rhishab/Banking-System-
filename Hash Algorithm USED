#include <iostream>
#include <string>
#include<cstdio>
#include<cstdlib>

using namespace std;

const int T_S = 200;

class HahsTableEntry{
    public:
    int k;
    int v;
    HashTableEntry(int k,int v){
        this->k=k;
        this->v=v;
    }
};
//Main Function 
class HashMapTable{
    private:
    HashTableEntry **t;
    public:
    HashMapTable() {         // Main Hash Table Formation 
        t = new HashTableEntry * [T_S];
        itn i;
        for(int i=0;i<T_S;i++) {
            t[i] = NULL:
        }
    }
    int HashFunc(int K) {
        return K % T_S;
    }
    //Insert Function 
    int h= HashFunc(k);
    while (t[h]!= NULL && t[h]->k!=k) {
        h = HashFunc(h+1);       //While it's not empty or Over Filled it will loop
    }
    //END Insert Function 
    
    // Search Key
    int SearchKey(int k) {
        int h = HashFunc(k);
        while(t[h]!= NULL && t[h]->k != k ){
            hHashFunc(h+1);
        }
        if(t[h]= NULL){
            return -1;
        } else {
            return t[h]->v;
        }
    }
    //END Search Key
    //Remove Key 
    void Remove(int k) {
         int h = HashFunc(k);
         while (t[h] != NULL) {
            if (t[h]->k == k)
               break;
            h = HashFunc(h + 1);
         }
         if (t[h] == NULL) {
            cout<<"No Element found at key "<<k<<endl;
            return;
         } else {
            delete t[h];
         }
         cout<<"Element Deleted"<<endl;
      }
    //END Remove Key
    ~HashMapTable() {
         for (int i = 0; i < T_S; i++) {
            if (t[i] != NULL)
               delete t[i];
               delete[] t;
         }
      }
}

int main() {
   HashMapTable hash;
   int k, v;
   int c;
   while (1) {
      cout<<"1.Insert element into the table"<<endl;
      cout<<"2.Search element from the key"<<endl;
      cout<<"3.Delete element at a key"<<endl;
      cout<<"4.Exit"<<endl;
      cout<<"Enter your choice: ";
      cin>>c;
      switch(c) {
         case 1:
            cout<<"Enter element to be inserted: ";
            cin>>v;
            cout<<"Enter key at which element to be inserted: ";
            cin>>k;
            hash.Insert(k, v);
         break;
         case 2:
            cout<<"Enter key of the element to be searched: ";
            cin>>k;
            if (hash.SearchKey(k) == -1) {
               cout<<"No element found at key "<<k<<endl;
               continue;
            } else {
               cout<<"Element at key "<<k<<" : ";
               cout<<hash.SearchKey(k)<<endl;
            }
         break;
         case 3:
            cout<<"Enter key of the element to be deleted: ";
            cin>>k;
            hash.Remove(k);
         break;
         case 4:
            exit(1);
         default:
            cout<<"\nEnter correct option\n";
      }
   }
   return 0;
}
    
    
   

